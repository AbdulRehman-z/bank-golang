// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: exchange-rates.sql

package db

import (
	"context"
)

const getExchangeRate = `-- name: GetExchangeRate :one
SELECT id, base_currency, rate, created_at
FROM exchange_rates
WHERE base_currency = $1
LIMIT 1
`

func (q *Queries) GetExchangeRate(ctx context.Context, baseCurrency string) (ExchangeRate, error) {
	row := q.db.QueryRowContext(ctx, getExchangeRate, baseCurrency)
	var i ExchangeRate
	err := row.Scan(
		&i.ID,
		&i.BaseCurrency,
		&i.Rate,
		&i.CreatedAt,
	)
	return i, err
}

const saveExchangeRates = `-- name: SaveExchangeRates :exec
INSERT INTO exchange_rates (base_currency, rate)
VALUES ($1, $2) ON CONFLICT (base_currency) DO
UPDATE
SET rate = $2
`

type SaveExchangeRatesParams struct {
	BaseCurrency string `json:"base_currency"`
	Rate         string `json:"rate"`
}

func (q *Queries) SaveExchangeRates(ctx context.Context, arg SaveExchangeRatesParams) error {
	_, err := q.db.ExecContext(ctx, saveExchangeRates, arg.BaseCurrency, arg.Rate)
	return err
}
