// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/AbdulRehman-z/bank-golang/worker (interfaces: TaskDistributor)
//
// Generated by this command:
//
//	mockgen -destination worker/mock/distributor.go -package mockworker github.com/AbdulRehman-z/bank-golang/worker TaskDistributor
//
// Package mockworker is a generated GoMock package.
package mockworker

import (
	context "context"
	reflect "reflect"

	worker "github.com/AbdulRehman-z/bank-golang/worker"
	asynq "github.com/hibiken/asynq"
	gomock "go.uber.org/mock/gomock"
)

// MockTaskDistributor is a mock of TaskDistributor interface.
type MockTaskDistributor struct {
	ctrl     *gomock.Controller
	recorder *MockTaskDistributorMockRecorder
}

// MockTaskDistributorMockRecorder is the mock recorder for MockTaskDistributor.
type MockTaskDistributorMockRecorder struct {
	mock *MockTaskDistributor
}

// NewMockTaskDistributor creates a new mock instance.
func NewMockTaskDistributor(ctrl *gomock.Controller) *MockTaskDistributor {
	mock := &MockTaskDistributor{ctrl: ctrl}
	mock.recorder = &MockTaskDistributorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskDistributor) EXPECT() *MockTaskDistributorMockRecorder {
	return m.recorder
}

// TaskSendVerificationEmail mocks base method.
func (m *MockTaskDistributor) TaskSendVerificationEmail(arg0 context.Context, arg1 *worker.PayloadSendVerificationEmail, arg2 ...asynq.Option) error {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TaskSendVerificationEmail", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// TaskSendVerificationEmail indicates an expected call of TaskSendVerificationEmail.
func (mr *MockTaskDistributorMockRecorder) TaskSendVerificationEmail(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TaskSendVerificationEmail", reflect.TypeOf((*MockTaskDistributor)(nil).TaskSendVerificationEmail), varargs...)
}
